#include <stdint.h>

#pragma once

// Amount of 8 bit blocks.
#define IRAM_SIZE 148
#define ROM_SIZE 512

/** Register Addresses **/
// Blocks of registers are addressed with 's' and 'e' at the end of the
// name to indicate 'start' and 'end' of the block.
typedef enum {
  R_B0s   = 0x00,
  R_B0e   = 0x07,
  R_B1s   = 0x08,
  R_B1e   = 0x0F,
  R_B2s   = 0x10,
  R_B2e   = 0x17,
  R_B3s   = 0x18,
  R_B3e   = 0x1F,
  BaSs    = 0x20,
  BaSe    = 0x2F,
  GPs     = 0x30,
  GPe     = 0x7F,
  P0      = 0x80,
  SP      = 0x81,
  DPL     = 0x81,
  DPH     = 0x82,
  TCON    = 0x88,
  TMOD    = 0x89,
  TL0     = 0x8A,
  TL1     = 0x8B,
  TH0     = 0x8C,
  TH1     = 0x8D,
  P1      = 0x90,
  SCON    = 0x98,
  SBUF    = 0x99,
  P2      = 0xA0,
  IE      = 0xA8,
  P3      = 0xB0,
  IP      = 0xB8,
  PSW     = 0xD0,
  A       = 0xE0,
  B       = 0xF0
} mmap_t;

/** Program Counter **/
// Separate from IRAM.
typedef uint8_t pc_8b_t[2];
typedef uint16_t pc_16b_t;
typedef union {
  pc_8b_t halfs;
  pc_16b_t full;
} pc_t;

/** Bank of Working Registers **/
// x4 @ 0-31
typedef uint8_t bwr_t[8];

/** 128 Bit-addressable Space **/
// x1 @ 32-47
typedef uint8_t bas_t[16];

/** x80 8-bit General Purpose Registers **/
// x1 @ 48-127
typedef uint8_t gp_t[80];

/** Data Pointer **/
// Low x1 @ 130 & High x1 @ 131
typedef struct {
  uint8_t DPL;
  uint8_t DPH;
} dptr_8b_t;
typedef uint16_t dptr_16b_t;
typedef union {
  dptr_8b_t halfs;
  dptr_16b_t full;
} dptr_t;


/** Timer/Counter Control/Status Register **/
// x1 @ 136 - bit-addressable
// TODO: Add details.
typedef uint8_t tcon_t;

/** Timer/Counter Mode Register **/
// x1 @ 137
// TODO: Add details.
typedef uint8_t tmod_t;

/** Serial Port Control **/
// x1 @ 152 - bit-addressable
// TODO: Add details.
typedef uint8_t scon_t;

/** Interrupt Enable **/
// x1 @ 168 - bit-addressable
// TODO: Add details.
typedef uint8_t ie_t;

/** Port 3 **/
// x1 @ 176 - bit-addressable
// Each 8 bit has different functions.
// 7: RD    read data control output. Active low pulse is generated by
//          hardware when external data memory is read.
// 6: WR    write data control output. Active low pulse is generated by
//          hardware when external data memory is written.
// 5: T1    timer/counter 1 external input or test pin.
// 4: T0    timer/counter 0 external input or test pin.
// 3: INT1  interrupt 1 input pin. Low-level or falling-edge triggered.
// 2: INT0  interrupt 0 input pin. Low-level or falling-edge triggered.
// 1: TXD   transmit Data pin for serial port in UART mode. Clock output in
//          shift register mode.
// 0: RXD   receive Data pin for serial port in UART mode. Data I/O pin in
//          shift register mode.
typedef uint8_t p3_t;

/** Interrupt Priority **/
// x1 @ 184 - bit-addressable
// TODO: Add details.
typedef uint8_t ip_t;

/** Program Status Word **/
// x1 @ 208
// Each 8 bit has different functions.
// 7: CY    carry flag set/cleared by hardware/software during certain
//          arithmetic and logical instructions.
// 6: AC    auxilliary carry flag set/cleared by hardware during add/sub
//          instructions to indicate carry/borrow out of bit 3.
// 5: F0    user-defined status flag.
// 4: RS1   working register bank control 1 by software.
//          (RS1: 0, RS0: 0), Bank 0 @ 0-7;   (RS1: 0, RS0: 1), Bank 1 @ 8-15;
//          (RS1: 1, RS0: 0), Bank 2 @ 16-23; (RS1: 1, RS0: 1), Bank 3 @ 24-31;
// 3: RS0   working register bank control 0 by software.
// 2: OV    set/cleared by hardware during arithmetic instructions to
//          indicate overflow conditions.
// 1: -     user-defined status flag.
// 0: P     set/cleared by hardware each instruction cycle to indicate an
//          odd/even number of "one" bits in the accumulator, i.e. even
//          parity.
typedef uint8_t psw_t;

/** Accumulator **/
// x1 @ 224
// Holds source and result of arithmetic instructions, be source or
// destination for logical operations.
typedef uint8_t a_t;

/** B **/
// x1 @ 240
// Used in conjunction with the accumulator as the second input operand
// and to return bits of the result in multiplication and division.
typedef uint8_t b_t;

/** Special Function Registers **/
// Accessible through direct addressing and simply calling the symbols.
// It is part of IRAM conceptually in MCS-51s with 128 x 8 bits of IRAM
// memory, but part of IRAM literally in MCS-51s with 256 x 8 bits of IRAM
// memory in the same space as the upper 128 x 8 bits.
// TODO: Create types for each register and write any documentations their
// function there.
typedef struct {
  uint8_t P0;     // (128, bit-addressable) Port 0
  uint8_t SP;     // (129) Stack Pointer
  dptr_t DPTR;
  tcon_t TCON;
  tmod_t TMOD;
  uint8_t TL0;    // (138) Timer 0 Low byte
  uint8_t TL1;    // (139) Timer 1 Low byte
  uint8_t TH0;    // (140) Timer 0 High byte
  uint8_t TH1;    // (141) Timer 1 High byte
  uint8_t P1;     // (144, bit-addressable) Port 1
  scon_t SCON;
  uint8_t SBUF;   // (153) Serial Port Data Buffer
  uint8_t P2;     // (160, bit-addressable) Port 2
  ie_t IE;
  p3_t P3;
  ip_t IP;
  psw_t PSW;
  a_t A;
  b_t B;
} sfr_t;

/** IRAM (Separated) **/
// Except SFR are accessible through direct/indirect addressing.
typedef struct {
  bwr_t R[4];
  bas_t BaS;
  gp_t GP;
  sfr_t SFR;
} iram_separated_t;

/** IRAM (Compact) **/
// 128 x 8 bits for all register banks, bit-addressable space, and general
// purpose registers, 20 x 8 bits for all SFRs.
typedef struct {
  uint8_t reg[IRAM_SIZE];
} iram_compact_t;

// Type punning IRAM for both closer resemblance of the actual device and
// ease of usage.
typedef union {
  iram_separated_t separated;
  iram_compact_t compact;
} iram_t;

/** ROM (Program Memory) **/
typedef uint8_t rom_t[ROM_SIZE];

uint8_t* read_rom(rom_t *rom, uint8_t addr);
bwr_t* set_active_working_register_bank(iram_t *iram);
